diff -ru --exclude .svn llvm-3.5/include/llvm/LinkAllPasses.h llvm-3.5-scratch/include/llvm/LinkAllPasses.h
--- llvm-3.5/include/llvm/LinkAllPasses.h	2014-09-11 15:15:50.854006730 -0400
+++ llvm-3.5-scratch/include/llvm/LinkAllPasses.h	2014-09-11 17:03:20.729956201 -0400
@@ -161,6 +161,8 @@
       (void) llvm::createScalarizerPass();
       (void) llvm::createSeparateConstOffsetFromGEPPass();
 
+      (void) llvm::createStupidAlignPass();
+
       (void)new llvm::IntervalPartition();
       (void)new llvm::FindUsedTypes();
       (void)new llvm::ScalarEvolution();
Only in llvm-3.5-scratch/include/llvm: LinkAllPasses.h.orig
diff -ru --exclude .svn llvm-3.5/include/llvm/Transforms/Vectorize.h llvm-3.5-scratch/include/llvm/Transforms/Vectorize.h
--- llvm-3.5/include/llvm/Transforms/Vectorize.h	2014-09-11 15:15:48.162006751 -0400
+++ llvm-3.5-scratch/include/llvm/Transforms/Vectorize.h	2014-09-11 17:03:20.729956201 -0400
@@ -120,6 +120,10 @@
 Pass *createLoopVectorizePass(bool NoUnrolling = false,
                               bool AlwaysVectorize = true);
 
+
+Pass *createStupidAlignPass();
+
+
 //===----------------------------------------------------------------------===//
 //
 // SLPVectorizer - Create a bottom-up SLP vectorizer pass.
Only in llvm-3.5-scratch/include/llvm/Transforms: Vectorize.h.orig
diff -ru --exclude .svn llvm-3.5/lib/Transforms/Vectorize/LoopVectorize.cpp llvm-3.5-scratch/lib/Transforms/Vectorize/LoopVectorize.cpp
--- llvm-3.5/lib/Transforms/Vectorize/LoopVectorize.cpp	2014-09-11 15:15:33.062006869 -0400
+++ llvm-3.5-scratch/lib/Transforms/Vectorize/LoopVectorize.cpp	2014-09-11 17:11:51.041952150 -0400
@@ -90,6 +90,7 @@
 #include "llvm/Transforms/Utils/BasicBlockUtils.h"
 #include "llvm/Transforms/Utils/Local.h"
 #include "llvm/Transforms/Utils/VectorUtils.h"
+#include "llvm/IR/TypeBuilder.h"
 #include <algorithm>
 #include <map>
 #include <tuple>
@@ -1407,6 +1408,46 @@
 
 };
 
+
+  struct StupidAlign : public FunctionPass {
+    static char ID; // Pass identification, replacement for typeid
+    StupidAlign() : FunctionPass(ID) {}
+
+    bool runOnFunction(Function &F) override {
+      bool modified = false;
+
+      for (Function::iterator FI = F.begin(), FE = F.end(); FI != FE; ) {
+	BasicBlock *BB = FI++;
+	for (BasicBlock::iterator BI = BB->begin(), BE = BB->end(); BI != BE;) {
+	  Instruction *I = BI++;
+	  if (isa<LoadInst>(I) || isa<StoreInst>(I)) {
+	    unsigned alignment = isa<LoadInst>(I) ? cast<LoadInst>(I)->getAlignment() : cast<StoreInst>(I)->getAlignment();
+	    Value* pointer = isa<LoadInst>(I) ? cast<LoadInst>(I)->getPointerOperand() : cast<StoreInst>(I)->getPointerOperand();
+	    if (alignment == 8) {
+	      if (isa<CastInst>(pointer)) {
+		Type* dest_type = cast<CastInst>(pointer)->getDestTy();
+
+		if (dest_type == PointerType::getUnqual( 
+							VectorType::get( 
+									TypeBuilder<double,false>::get( getGlobalContext() ) , 
+									4 ) ) ) {
+		  if (isa<LoadInst>(I))
+		    cast<LoadInst>(I)->setAlignment(32);
+		  else
+		    cast<StoreInst>(I)->setAlignment(32);
+		  modified = true;
+		}
+	      }
+	    }
+	  }
+	}
+      }
+
+      return modified;
+    }
+  };
+
+
 } // end anonymous namespace
 
 //===----------------------------------------------------------------------===//
@@ -5972,6 +6013,9 @@
   Pass *createLoopVectorizePass(bool NoUnrolling, bool AlwaysVectorize) {
     return new LoopVectorize(NoUnrolling, AlwaysVectorize);
   }
+  Pass *createStupidAlignPass() {
+    return new StupidAlign();
+  }
 }
 
 bool LoopVectorizationCostModel::isConsecutiveLoadOrStore(Instruction *Inst) {
